# Build against RACK 1.0

trigger:
- master
- release/*

pr:
- master

jobs:
- job: Build
  strategy:
    matrix:
      mac10:
        imageName: 'macos-10.13'
        isMac: true
        sdkURL: https://vcvrack.com/downloads/Rack-SDK-1.0.0.zip
        artifactMatrixID: 'SURGERACK_ZIP_MACOS_10' 
      windows10:
        imageName: 'vs2017-win2016'
        isWindows: true
        sdkURL: https://vcvrack.com/downloads/Rack-SDK-1.0.0.zip
        artifactMatrixID: 'SURGERACK_ZIP_WINDOWS_10'  
      linux10:
        imageName: 'ubuntu-16.04'
        isLinux: true
        sdkURL: https://vcvrack.com/downloads/Rack-SDK-1.0.0.zip
        artifactMatrixID: 'SURGERACK_ZIP_LINUX_10'  

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      pushd $AGENT_TEMPDIRECTORY
      curl -o Rack-SDK.zip  $(sdkURL)
      unzip Rack-SDK.zip
      ls -alFh
      ls -alFh Rack-SDK
      popd
    displayName: Get Rack  


  - bash: |
      git submodule update --init --recursive
    displayName: Get Surge SubModule

  - bash: |
      ./scripts/resetversion.sh
    displayName: Update Version in plugins.json
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')


  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      export CC=gcc
      export CPP=g++
      echo RACK_DIR is ${RACK_DIR}
      ls ${RACK_DIR}/include
      make -j 4 win-dist

      mkdir products/
      cp dist/*zip products/
    displayName: Build Windows Plugins
    condition: variables.isWindows

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make -j 4 dist
      mkdir products/
      cp dist/*zip products/
    displayName: Build Mac Plugins
    condition: variables.isMac

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make -j 4 dist
      mkdir products/
      cp dist/*zip products/
    displayName: Build Linux Plugins
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(artifactMatrixID)
      targetPath: 'products/'
    displayName: Publish Zip


- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release')))

  steps:

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_LINUX_10'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_MACOS_10'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'SURGERACK_ZIP_WINDOWS_10'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     scripts/release-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
    displayName: Fake up release notes

  - task: GitHubRelease@0
    displayName: "Update Github Nightly"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/surge-rack
      action: edit
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

  - task: GitHubRelease@0
    displayName: "Update Github Release"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
    inputs:
      gitHubConnection: surge-rackupdater
      repositoryName: surge-synthesizer/surge-rack
      action: create
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      assets: $(Build.ArtifactStagingDirectory)/*.zip

